@page "/stocks/add"
@using CSEInvestmentTool.Application.Services
@using CSEInvestmentTool.Domain.Models
@using CSEInvestmentTool.Application.Interfaces
@using CSEInvestmentTool.Application.Models
@using CSEInvestmentTool.Web.Helpers
@inject IStockRepository StockRepository
@inject IFundamentalDataRepository FundamentalRepository
@inject IStockScoringService ScoringService
@inject IStockScoreRepository ScoreRepository
@inject IStockCalculationService StockCalculationService
@inject NavigationManager NavigationManager
@inject ILogger<AddStock> Logger

<div class="max-w-7xl mx-auto p-6 bg-white rounded-lg shadow-sm">
    <h2 class="text-2xl font-bold mb-6">Add New Stock</h2>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="mb-4 p-4 border-l-4 border-red-500 bg-red-50 rounded">
            <div class="flex">
                <div class="flex-shrink-0">
                    <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">Error Adding Stock</h3>
                    <p class="text-sm text-red-700 mt-1">@_errorMessage</p>
                </div>
            </div>
        </div>
    }

    <EditForm Model="@_stockEntry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="grid grid-cols-12 gap-6">
            <!-- Stock Information -->
            <div class="@(_relatedSymbols.Count > 0 ? "col-span-3" : "col-span-6") space-y-6 p-6 bg-gray-50 rounded-lg">
                <h3 class="text-lg font-semibold">Stock Information</h3>

                <!-- Company Search Dropdown -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Company Name</label>
                    <div class="relative mt-1">
                        <div class="flex">
                            <input type="text"
                                   placeholder="Search for a company..."
                                   @onfocus="ShowCompanyDropdown"
                                   @onblur="DelayedHideCompanyDropdown"
                                   @oninput="HandleCompanySearchInput"
                                   value="@_companySearchInput"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10" />
                            @if (_loadingCompanies)
                            {
                                <div class="absolute inset-y-0 right-3 flex items-center">
                                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-900"></div>
                                </div>
                            }
                        </div>

                        @if (_showCompanyDropdown && _filteredCompanies.Any())
                        {
                            <div class="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 overflow-auto">
                                @foreach (var company in _filteredCompanies)
                                {
                                    <div class="cursor-pointer px-4 py-2 hover:bg-gray-100" @onmousedown="() => SelectCompany(company)">
                                        <div class="text-sm">@company.CompanyName</div>
                                        @if (company.HasMultipleStocks)
                                        {
                                            <div class="text-xs text-gray-500">
                                                Multiple stock types available
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    @if (string.IsNullOrEmpty(_stockEntry.Stock.CompanyName) && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Company name is required</p>
                        </div>
                    }
                </div>

                <!-- Stock Type Dropdown (Only shown if company has multiple stock types) -->
                @if (_availableStockTypes.Count > 1)
                {
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Stock Type</label>
                        <select value="@_selectedStockType"
                                @onchange="async (e) => {
                                    _selectedStockType = e.Value?.ToString() ?? string.Empty;
                                    await HandleStockTypeChange(e);
                                }"
                                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10">
                            <option value="">Select a stock type</option>
                            @foreach (var stockType in _availableStockTypes)
                            {
                                <option value="@stockType.Symbol">@stockType.Symbol</option>
                            }
                        </select>
                        @if (string.IsNullOrEmpty(_stockEntry.Stock.Symbol) && _availableStockTypes.Count > 1)
                        {
                            <div class="mt-1 text-xs text-blue-600">
                                This company has multiple stock types. Please select one.
                            </div>
                        }

                        @if (_availableStockTypes.Count > 1 && string.IsNullOrEmpty(_selectedStockType) && _validationAttempted)
                        {
                            <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                                <p class="text-xs text-red-700">Stock type is required</p>
                            </div>
                        }
                    </div>
                }

                <!-- Symbol (read-only once company is selected) -->
                <div>
                    <label class="block text-sm font-medium text-gray-700">Symbol</label>
                    <div class="flex mt-1">
                        <InputText @bind-Value="_stockEntry.Stock.Symbol"
                                   readonly="@(_selectedCompanyName != string.Empty)"
                                   class="@SymbolInputClass" />
                        @if (_symbolFound)
                        {
                            <div class="ml-2 flex items-center">
                                <svg class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                            </div>
                        }
                    </div>

                    @if (string.IsNullOrEmpty(_stockEntry.Stock.Symbol) && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Symbol is required</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Sector</label>
                    <InputSelect @bind-Value="_stockEntry.Stock.Sector"
                                 class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10">
                        <option value="">Select a Sector</option>
                        @foreach (var sector in _sectors)
                        {
                            <option value="@sector">@sector</option>
                        }
                    </InputSelect>

                    @if (string.IsNullOrEmpty(_stockEntry.Stock.Sector) && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Sector is required</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Fundamental Data -->
            <div class="@(_relatedSymbols.Count > 0 ? "col-span-3" : "col-span-6") space-y-6 p-6 bg-gray-50 rounded-lg">
                <h3 class="text-lg font-semibold">Fundamental Data</h3>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Market Price (LKR)</label>
                    <div class="relative mt-1">
                        <InputNumber @bind-Value="_stockEntry.Fundamentals.MarketPrice"
                                     class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-100 h-10"
                                     disabled="true" />
                    </div>
                    <div class="mt-1 text-xs text-gray-600">
                        @_stockEntry.Fundamentals.MarketPrice.ToTwoDecimalPlaces() LKR
                    </div>

                    @if (_stockEntry.Fundamentals.MarketPrice <= 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Market Price must be greater than zero</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">NAV (LKR)</label>
                    <div class="relative mt-1">
                        <InputNumber @bind-Value="_stockEntry.Fundamentals.NAV"
                                     class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-100 h-10"
                                     disabled="true" />
                    </div>
                    <div class="mt-1 text-xs text-gray-600">
                        @_stockEntry.Fundamentals.NAV.ToTwoDecimalPlaces() LKR
                    </div>

                    @if (_stockEntry.Fundamentals.NAV <= 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">NAV must be greater than zero</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">EPS (LKR)</label>
                    <InputNumber @bind-Value="_stockEntry.Fundamentals.EPS"
                                 class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10" />

                    @if (_stockEntry.Fundamentals.EPS <= 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">EPS must be greater than zero</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Annual Dividend (LKR)</label>
                    <InputNumber @bind-Value="_stockEntry.Fundamentals.AnnualDividend"
                                 class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10" />

                    @if (_stockEntry.Fundamentals.AnnualDividend < 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Annual Dividend cannot be negative</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Total Liabilities (LKR)</label>
                    <div class="relative mt-1">
                        <input type="text"
                               value="@_formattedLiabilities"
                               @oninput="OnLiabilitiesInput"
                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10" />
                    </div>
                    <div class="mt-1 text-xs text-gray-600">
                        @_stockEntry.Fundamentals.TotalLiabilities.ToString("N0") LKR
                    </div>

                    @if (_stockEntry.Fundamentals.TotalLiabilities <= 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Total Liabilities must be greater than zero</p>
                        </div>
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Total Equity (LKR)</label>
                    <div class="relative mt-1">
                        <input type="text"
                               value="@_formattedEquity"
                               @oninput="OnEquityInput"
                               class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 h-10" />
                    </div>
                    <div class="mt-1 text-xs text-gray-600">
                        @_stockEntry.Fundamentals.TotalEquity.ToString("N0") LKR
                    </div>

                    @if (_stockEntry.Fundamentals.TotalEquity <= 0 && _validationAttempted)
                    {
                        <div class="bg-red-50 border-l-4 border-red-400 p-2 mt-1 rounded">
                            <p class="text-xs text-red-700">Total Equity must be greater than zero</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Related Stock Symbols -->
            @if (_relatedSymbols.Count > 0)
            {
                <div class="col-span-6 p-6 bg-indigo-50 rounded-lg">
                    <h4 class="text-sm font-medium text-indigo-800 mb-2">Related Stock Symbols</h4>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-indigo-200">
                            <thead class="bg-indigo-50">
                                <tr>
                                    <th scope="col" class="px-3 py-2 text-left text-xs font-medium text-indigo-700 uppercase tracking-wider">Symbol</th>
                                    <th scope="col" class="px-3 py-2 text-right text-xs font-medium text-indigo-700 uppercase tracking-wider">Issued Quantity</th>
                                    <th scope="col" class="px-3 py-2 text-right text-xs font-medium text-indigo-700 uppercase tracking-wider">Market Price (LKR)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var relatedSymbol in _relatedSymbols)
                                {
                                    <tr class="bg-indigo-50">
                                        <td class="px-3 py-2 whitespace-nowrap text-sm text-indigo-800">
                                            @relatedSymbol.Symbol
                                            @if (relatedSymbol.Symbol == _stockEntry.Stock.Symbol)
                                            {
                                                <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-indigo-100 text-indigo-800">
                                                    Selected
                                                </span>
                                            }
                                        </td>
                                        <td class="px-3 py-2 whitespace-nowrap text-sm text-right text-indigo-800">@relatedSymbol.IssuedQuantity.ToString("N0")</td>
                                        <td class="px-3 py-2 whitespace-nowrap text-sm text-right text-indigo-800">@relatedSymbol.MarketPrice.ToTwoDecimalPlaces()</td>
                                    </tr>
                                }
                                <tr class="bg-indigo-100">
                                    <td class="px-3 py-2 whitespace-nowrap text-sm font-bold text-indigo-900">Total</td>
                                    <td class="px-3 py-2 whitespace-nowrap text-sm font-bold text-right text-indigo-900">@_totalIssuedQuantity.ToString("N0")</td>
                                    <td class="px-3 py-2 whitespace-nowrap text-sm text-right text-indigo-900"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <p class="text-xs text-indigo-700 mt-2">
                        * Total issued quantity is used for NAV calculation (Total Equity / Total Issued Quantity)
                    </p>
                </div>
            }
        </div>

        <div class="mt-6 flex justify-end space-x-4">
            <button type="button"
                    class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    @onclick="NavigateBack">
                Cancel
            </button>
            <button type="button"
                    class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                    @onclick="ValidateAndSubmit">
                Save Stock
            </button>
        </div>
    </EditForm>
</div>